#include <stdio.h>
#include <string.h>

void clear_stdin()
{
	unsigned char c;

	c = 0;
	do {
		c = getchar();
		if (c == 0xa)
			return;
	} while (c != 0xff);
}

int get_unum()
{
	//space 40
	unsigned int unum;

	fflush(stdout);
	scanf("%u", &unum);
	clear_stdin();
	return (unum);
}

int store_number(char *database)
{
	//space 40
	unsigned int number = 0;   ebp-0x10
	unsigned int index = 0;   ebp-0xC
	
	unsigned int result = 4242424; 		0xaaaaaaab ??

	printf(" Number: ");
	number = get_unum();
	
	printf(" Number: ");
	index = get_unum();	; <+59>:    mov    DWORD PTR [ebp-0xc],eax
	
	
	0x0804866e <+62>:    mov    ecx, DWORD PTR [ebp-0xc]	; index
   	0x08048671 <+65>:    mov    edx,0xaaaaaaab		; 2 863 311 531
  	0x08048676 <+70>:    mov    eax,ecx			; index
   	0x08048678 <+72>:    mul    edx				; mutlp $eax by edx => index * 0xaaaaaaab
								; save most significant 32 bits of the operation in EDX
								; equivalent to index / 3 
								
   	0x0804867a <+74>:    shr    edx,1			; edx >> 1, equivalent to edx / 2
   	0x0804867c <+76>:    mov    eax,edx			; eax = edx
   	0x0804867e <+78>:    add    eax,eax			; eax *= 2 
								; Those 3 lines are equivalent to `mov eax, edx` 
								
   	0x08048680 <+80>:    add    eax,edx			; eax += edx   or   eax = eax * 1.5 
								
								; Now we only done '(index / 3) * 1.5'   -   $eax holds this value here
								
   	0x08048682 <+82>:    mov    edx,ecx			; edx = index;
   	0x08048684 <+84>:    sub    edx,eax			; edx = index - eax	=>	index = (index / 3) * 1.5
	
   	0x08048686 <+86>:    test   edx,edx			; equivalent to index % 3 == 0
   	0x08048688 <+88>:    je     0x8048697 <store_number+103>
	
	if(index % 3 == 0 ||number >> 24 == 183)
	{
		puts(" *** ERROR! ***");
		puts("   This index is reserved for wil!");
		puts(" *** ERROR! ***");
	}
	// index = index << 2;  ?? shl 0x2 on database, wtf?
	database[index] = nbr;
	return (0);
}

int read_number(char *le_buffer)
{
	// sub    esp,0x28  			; space 40
	// mov    DWORD PTR [ebp-0xc],0x0
	unsigned int index = 0;

	printf(" Index: ");
	index = get_unum();

	printf(" Number at data[%u] is %u\n", index, le_buffer[index << 2]);
	return (0);
}

int main(int ac, char **av, char **env)
{
	//sub    esp,0x1d0 ; 464

	// <+44>:    mov    DWORD PTR [esp+0x1b4],0x0
	int return_value;
	
	// <+55>:    mov    DWORD PTR [esp+0x1b8],0x0
	char *input_buffer;
	
	// <main+110> lea    ebx,[esp+0x24]	;
	char	database[100];
	
	// mov    eax,0x0
   	// mov    edx,0x64
        // mov    edi,ebx
        // mov    ecx,edx
        // rep stos DWORD PTR es:[edi], eax
	memset(database, 0, 100);
	
	// <+130>: jmp    0x80487ea <main+199>
	// <+199>: mov    eax,DWORD PTR [esp+0x1c]	; av
        // mov    eax,DWORD PTR [eax]
        // test   eax,eax
        // jne    0x80487a7 <main+132>
	int i = 0;
	while (av[i] != 0)
	{
		memset(av[i], 0, strlen(av[i]));
		i++;
	}
	i = 0;
	while (env[i] != 0)
	{
		memset(env[i], 0, strlen(env[i]));
		i++;
	}
	
	puts("----------------------------------------------------\n"\
        	"\n  Welcome to wil's crappy number storage service!   \n"\
        	"----------------------------------------------------"\
        	"\n Commands:                                     ");
		
	while(1)
	{
		printf("Input command: );
		
		// <+341>: lea    eax,[esp+0x1b8]  ; input_buffer
		fgets(input_buffer, 20, stdin);
		
		input_buffer[strlen(input_buffer) - 1] = '\0'; // Removes the trailing '\n';
		
		if (strncmp(input_buffer, "store", 5) == 0)
		{
			// lea    eax,[esp+0x24]
 			// mov    DWORD PTR [esp],eax
   			// call   0x8048630 <store_number>		; Just one arg
			// <+460>:   mov    DWORD PTR [esp+0x1b4],eax	; simple variable, not buffer[0]
			return_value = store_number(database);
		}	
		else if (strncmp(input_buffer, "read", 4) == 0)
		{
			// <+513>:   lea    eax,[esp+0x24]	; le_buffer
   			// mov    DWORD PTR [esp],eax
   			// call   0x80486d7 <read_number>
   			// mov    DWORD PTR [esp+0x1b4],eax
			return_value = read_number(database);
		}	
		else if (strncmp(input_buffer, "quit", 4) == 0)
			break;
			
		if (return_value == 0)
			printf(" Completed %s command successfully\n", input_buffer);
		else
			printf(" Failed to do %s command\n", input_buffer);
	}
	return 0;
}
