#include <stdio.h>
#include <strings.h>
#include <stdlib.h>

struct s_message{
	char msg[140];
	char username[40];
	int len;
};

void secret_backdoor(void)
{
	//data 18446744073709551488
	char buffer[128];

	fgets(buffer, 128, stdin);
	system(buffer);
}

void set_username(struct s_message *message)
{
	// <+4>:     sub    rsp,0xa0
	// data stack frame = 160

	// <+11>:    mov    QWORD PTR [rbp-0x98],rdi
	// Arg -> &message

	// <+18>:    lea    rax,[rbp-0x90]
	// <+25>:    mov    rsi,rax
   	// <+28>:    mov    eax,0x0
   	// <+33>:    mov    edx,0x10
   	// <+38>:    mov    rdi,rsi
   	// <+41>:    mov    rcx,rdx
   	// <+44>:    rep stos QWORD PTR es:[rdi],rax
	// Mise a zero a partir de l'adresse rbp-90, sur 0x10 (16) fois QWORD (8)
	char buffer[128];

	bzero(buffer, 128);

	puts(">: Enter your username");
	printf(">>: ");

	// <+79>:    mov    rax,QWORD PTR [rip+0x201595]
	// <+86>:    mov    rax,QWORD PTR [rax]
   	// <+89>:    mov    rdx,rax
	// Recuperation du file stdin (breakpoint sur +86 + x/a $rax

	// <+92>:    lea    rax,[rbp-0x90]
   	// <+99>:    mov    esi,0x80 ,128
   	// <+104>:   mov    rdi,rax
   	// Preparation de l'appel a fgets avec notre buffer et sa taille
	fgets(buffer, 128, stdin);

	// <+112>:   mov    DWORD PTR [rbp-0x4],0x0
	// Int init to 0;
	int i = 0;

	// <+157>:   cmp    DWORD PTR [rbp-0x4],0x28
    // <+161>:   jg     0x555555554a81 <set_username+180>
	// Test si i est inferieur a 40
	//
	// <+163>:   mov    eax,DWORD PTR [rbp-0x4]
   	// <+166>:   cdqe
   	// <+168>:   movzx  eax,BYTE PTR [rbp+rax*1-0x90]
   	// <+176>:   test   al,al
	// <+178>:   jne    0x555555554a46 <set_username+121>
	// test si buffer[i] est nul, boucle sinon
	while (i <= 40 && buffer[i] != '\0')
	{
		// <+121>:   mov    eax,DWORD PTR [rbp-0x4]
   		// <+124>:   cdqe
   		// <+126>:   movzx  ecx,BYTE PTR [rbp+rax*1-0x90]
		// recupere buffer[i]

   		// <+134>:   mov    rdx,QWORD PTR [rbp-0x98]
   		// <+141>:   mov    eax,DWORD PTR [rbp-0x4]
   		// <+144>:   cdqe
   		// <+146>:   mov    BYTE PTR [rdx+rax*1+0x8c],cl
		// C'est par cette deduction relative a l'adresse que nous avons
		// determiné que message etait une structure
		// +0x8c = + 140, le debut de notre array username
		// recupere message->username[i] et assigne buffer[i]

		message->username[i] = buffer[i];
		// <+153>:   add    DWORD PTR [rbp-0x4],0x1
		// Ajout +1 a i
		i++;
	}
	// <+180>:   mov    rax,QWORD PTR [rbp-0x98]
   	// <+187>:   lea    rdx,[rax+0x8c]
	// Recuperation de l'array message dans notre structure

	// <+194>:   lea    rax,[rip+0x165]
    // <+201>:   mov    rsi,rdx
    // <+204>:   mov    rdi,rax
    // <+207>:   mov    eax,0x0
	// Appel a printf avec notre array comme argument
	printf(">: Welcome, %s", message->username);
	return;
}

void set_msg(struct s_message *message)
{
	// <+4>:     sub    rsp,0x410
	// data stack frame = 1040

	// <+11>:    mov    QWORD PTR [rbp-0x408],rdi
	// Notre structure message

	// <+18>:    lea    rax,[rbp-0x400]
	// <+25>:    mov    rsi,rax
	// <+28>:    mov    eax,0x0
	// <+33>:    mov    edx,0x80
	// <+38>:    mov    rdi,rsi
	// <+41>:    mov    rcx,rdx
	// <+44>:    rep stos QWORD PTR es:[rdi],rax
	// Buffer de 1024 initialisé avec des 0.
	char buffer[1024];

	bzero(buffer, 1024);
	puts(">: Msg @Unix-Dude");
	printf(">>: ");

	// <+79>:    mov    rax,QWORD PTR [rip+0x201630]
	// <+86>:    mov    rax,QWORD PTR [rax]
	// <+89>:    mov    rdx,rax
	// <+92>:    lea    rax,[rbp-0x400]
	// <+99>:    mov    esi,0x400
	// <+104>:   mov    rdi,rax
	// Lecture de 1024 caracteres depuis l'entree standard dans notre buffer

	fgets(buffer, 1024, stdin);

	// <+112>:   mov    rax,QWORD PTR [rbp-0x408]
   	// <+119>:   mov    eax,DWORD PTR [rax+0xb4]
	// <+125>:   movsxd rdx,eax
	// Chargement de l'int Len de notre structure sur la stack

	// <+128>:   lea    rcx,[rbp-0x400]
   	// <+135>:   mov    rax,QWORD PTR [rbp-0x408]
	// <+142>:   mov    rsi,rcx
	// <+145>:   mov    rdi,rax
	// Passage de notre structure et de notre buffer a strncpy
	strncpy(message->msg, buffer, message->len);
	return;
}

void handle_msg(void)
{
	// <+4>:     sub    rsp,0xc0
	// data stack frame = 192
	//
	// <+11>:    lea    rax,[rbp-0xc0]
	// Toutes la data assigne sur la stack est utilise comme stockage de
	// variables
	 struct s_message message;

	// <+18>:    add    rax,0x8c
	// <+24>:    mov    QWORD PTR [rax],0x0
	// <+63>:    mov    DWORD PTR [rbp-0xc],0x8c
	// Une array qui debute a rax + 0x8c donc 192 - 140 = 52
	// Un element different est assigne a rbp-0xc, 0xc = 12.
	// Les 12 premiers elements ne font pas partie de l'array donc: 52 - 12 = 40
	// L'instruction +63 assigne un DWORD, donc un int.

	// <+24>:    mov    QWORD PTR [rax],0x0
    // <+31>:    mov    QWORD PTR [rax+0x8],0x0
   	// <+39>:    mov    QWORD PTR [rax+0x10],0x0
   	// <+47>:    mov    QWORD PTR [rax+0x18],0x0
   	// <+55>:    mov    QWORD PTR [rax+0x20],0x0
	// Initialisation de notre buffer username
	bzero(message.username, 40);

	// <+63>:    mov    DWORD PTR [rbp-0xc],0x8c
	// Assigniation dans len de 0x8c, 140
	message.len = 140;

	// <+70>:    lea    rax,[rbp-0xc0]
	// Passe l'adresse de notre structure sur la stack avant l'appel de fonction
	set_username(&message);

	//<+85>:    lea    rax,[rbp-0xc0]
	// Passe l'adresse de notre structure sur la stack avant l'appel de fonction
	set_msg(&message);
	puts(">: Msg sent!");
}

int main(void)
{
	puts("--------------------------------------------\
			\"\n|   ~Welcome to l33t-m$n ~    v1337        |\n\
			\"--------------------------------------------");
	handle_msg();
	return 0;
}
